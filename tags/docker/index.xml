<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Be a Problem Solver</title><link>https://slchangtw.github.io/tags/docker/</link><description>Recent content in Docker on Be a Problem Solver</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 05 Oct 2023 09:27:00 +0800</lastBuildDate><atom:link href="https://slchangtw.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Docker to Run Your Python Tests</title><link>https://slchangtw.github.io/posts/20231005_build_docker_image/</link><pubDate>Thu, 05 Oct 2023 09:27:00 +0800</pubDate><guid>https://slchangtw.github.io/posts/20231005_build_docker_image/</guid><description>&lt;p>Have you ever come across the infamous &amp;lsquo;It works on my machine&amp;rsquo; issue? I&amp;rsquo;m sure you haveâ€”it&amp;rsquo;s a common challenge in software development. To tackle this problem, Docker containers offer a solution by allowing you to encapsulate your code and execute it in a consistent environment. As a result, Docker is widely adopted in various domains, including the automation of CI/CD pipelines. In this article, I will demonstrate how to leverage Docker to create and execute a Python test environment.&lt;/p></description></item></channel></rss>