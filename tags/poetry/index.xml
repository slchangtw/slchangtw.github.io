<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>poetry on Be a Problem Solver</title><link>https://slchangtw.github.io/tags/poetry/</link><description>Recent content in poetry on Be a Problem Solver</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 04 Oct 2023 10:43:32 +0800</lastBuildDate><atom:link href="https://slchangtw.github.io/tags/poetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Managing Project Dependencies with Poetry</title><link>https://slchangtw.github.io/posts/20231004_poetry_packages/</link><pubDate>Wed, 04 Oct 2023 10:43:32 +0800</pubDate><guid>https://slchangtw.github.io/posts/20231004_poetry_packages/</guid><description>&lt;p>Throughout the development of Python projects, incorporating third-party packages becomes essential. The conventional approach for managing project dependencies involves using a &lt;code>requirements.txt&lt;/code> file. However, it&amp;rsquo;s easy to overlook updating this file with newly installed packages using &lt;code>pip freeze &amp;gt; requirements.txt&lt;/code>. Moreover, it can be challenging to tell which dependencies were installed directly or indirectly via &lt;code>requirements.txt&lt;/code>, making it unclear which packages are genuinely essential after removing some.&lt;/p>
&lt;p>To address these issues, it&amp;rsquo;s recommended to adopt a modern package manager like &lt;code>poetry&lt;/code> for more efficient project dependency management.&lt;/p></description></item></channel></rss>