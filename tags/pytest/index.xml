<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pytest on Be a Problem Solver</title><link>https://slchangtw.github.io/tags/pytest/</link><description>Recent content in pytest on Be a Problem Solver</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Oct 2023 21:06:47 +0800</lastBuildDate><atom:link href="https://slchangtw.github.io/tags/pytest/index.xml" rel="self" type="application/rss+xml"/><item><title>Using pytest to Test Your Code</title><link>https://slchangtw.github.io/posts/20231001_pytest/</link><pubDate>Sun, 01 Oct 2023 21:06:47 +0800</pubDate><guid>https://slchangtw.github.io/posts/20231001_pytest/</guid><description>&lt;p>Have you ever found yourself inheriting legacy code and questioned its functionality after refactoring? Or, have you made changes to your code and wondered if it still works correctly? If you&amp;rsquo;ve experienced either of these scenarios, it&amp;rsquo;s time to consider implementing tests for your code. In this article, we will cover the basics of pytest for conducting unit tests.&lt;/p></description></item></channel></rss>